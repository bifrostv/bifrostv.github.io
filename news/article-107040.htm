<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN" class="no-js">

<head>
        <link rel="canonical" href="https://bifrostv.github.io/news/article-107040.htm" />
    <meta charset="utf-8" />
    <title>为什么重写equals一定要重写hashcode</title>
        <meta name="description" content="在原始的Object类中 默认equals比较规则是通过“==”来进行判断，这样比较的是两个对象的内存地址，默认的hashcode方法返回的是对象的内存地址由哈希算法转换成的一个整数，实际上指的的也是" />
        <link rel="icon" href="/assets/website/img/bifrostv/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="BifrosTV机场节点订阅官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://bifrostv.github.io/news/article-107040.htm" />
    <meta property="og:site_name" content="BifrosTV机场节点订阅官网" />
    <meta property="og:title" content="为什么重写equals一定要重写hashcode" />
    <meta property="og:image" content="https://bifrostv.github.io/uploads/20240907-1/79c506a24d461a2430a7e8074b4953df.webp" />
        <meta property="og:release_date" content="2025-04-29T08:02:18" />
    <meta property="og:updated_time" content="2025-04-29T08:02:18" />
        <meta property="og:description" content="在原始的Object类中 默认equals比较规则是通过“==”来进行判断，这样比较的是两个对象的内存地址，默认的hashcode方法返回的是对象的内存地址由哈希算法转换成的一个整数，实际上指的的也是" />
        
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta content="width=device-width, initial-scale=1" name="viewport" />

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="为什么重写equals一定要重写hashcode">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">
    
    <!-- GLOBAL MANDATORY STYLES -->
    <link href="http://fonts.googleapis.com/css?family=Hind:300,400,500,600,700" rel="stylesheet" type="text/css">
    <link href="/assets/website/js/frontend/bifrostv/simple-line-icons/css/simple-line-icons.css" rel="stylesheet" type="text/css" />
    <link href="/assets/website/js/frontend/bifrostv/bootstrap/css/bootstrap.min.css" rel="stylesheet" type="text/css" />
    <!-- PAGE LEVEL PLUGIN STYLES -->
    <link href="/assets/website/css/bifrostv/animate.css" rel="stylesheet">
    <!-- THEME STYLES -->
    <link href="/assets/website/css/bifrostv/layout.min.css" rel="stylesheet" type="text/css" />
    <link rel="stylesheet" href="/assets/website/css/G.css" />
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-VEEJKF77CS"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-VEEJKF77CS');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>


<body id="body" data-spy="scroll" data-target=".header" data-page="detail">
        <!--========== HEADER ==========-->
    <header class="header navbar-fixed-top">
        <!-- Navbar -->
        <nav class="navbar" role="navigation">
            <div class="container">
                <!-- Brand and toggle get grouped for better mobile display -->
                <div class="menu-container">
                    <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".nav-collapse">
                        <span class="sr-only">Toggle navigation</span>
                        <span class="toggle-icon"></span>
                    </button>
                    <!-- Logo -->
                    <div class="logo">
                                                <a class="logo-wrap" href="/">
                            <span>BifrosTV</span>
                        </a>
                                            </div>
                    <!-- End Logo -->
                </div>
                <!-- Collect the nav links, forms, and other content for toggling -->
                <div class="collapse navbar-collapse nav-collapse">
                    <div class="menu-container">
                        <ul class="nav navbar-nav navbar-nav-right">
                                                        <li class="nav-item"><a class="nav-item-child nav-item-hover" href="/">首页</a></li>
                                                        <li class="nav-item"><a class="nav-item-child nav-item-hover" href="/free-nodes/">免费节点</a></li>
                                                        <li class="nav-item"><a class="nav-item-child nav-item-hover" href="/paid-subscribe/">推荐机场</a></li>
                                                        <li class="nav-item"><a class="nav-item-child nav-item-hover" href="/client.htm">客户端</a></li>
                                                        <li class="nav-item"><a class="nav-item-child nav-item-hover" href="/news/">新闻资讯</a></li>
                                                    </ul>
                    </div>
                </div>
                <!-- End Navbar Collapse -->
            </div>
        </nav>
        <!-- Navbar -->
    </header>
    <!--========== END HEADER ==========-->
    <!--========== SLIDER ==========-->
    <div class="promo-block parallax-window" data-parallax="scroll" data-image-src="/assets/website/img/bifrostv/1920x1080/01.jpg">
        <div class="container">
            <div class="row">
                <div class="col-sm-12">
                    <div class="promo-block-divider">
                        <h1 class="promo-block-title">为什么重写equals一定要重写hashcode</h1>
                        <p class="promo-block-text">
                            <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / 正文
                        </p>
                    </div>
                </div>
            </div>
            <!--// end row -->
        </div>
    </div>
    <!--========== SLIDER ==========-->
    <!--========== PAGE LAYOUT ==========-->
    <!-- About -->
    <div id="about">
        <div class="container content-lg">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="Clash Meta免费节点订阅站" data-url="https://clash-meta.github.io">
                <div class="xcblog-blog-detail xcblog-blog-detail-defined">
                      				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <p><strong>在原始的Object类中</strong></p> <p>默认equals比较规则是通过“==”来进行判断，这样比较的是两个对象的<strong>内存地址</strong>，默认的hashcode方法返回的是<strong>对象的内存地址由哈希算法转换成的一个整数</strong>，实际上指的的也是内存。哈希算法具有一定的偶然性，不同的内存地址可能计算出相同的哈希值。</p> <p>对于原始的hashCode()和equals() 方法来说，通过equals() 比较两个对象相等，说明这两个对象的内存地址相同，进而知hashcode也是相同的。 </p> <p><strong>在实际使用中，大多数场景下，如HashMap中存放自定义对象类作为key</strong></p> <p>当用 HashMap 存入自定义的类时，如果不重写这个自定义类的 equals 和 hashCode 方法，得到的结果会和预期的不一样。</p> <p>举例，定义一个 HashMapKey.java 的类，只有一个属性 id ：</p> <pre><code class="prism language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashMapKey</span> <span class="token punctuation">{<!-- --></span>     <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>          <span class="token keyword">public</span> <span class="token class-name">HashMapKey</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> id<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <p>测试类如下：</p> <pre><code class="prism language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestHashMap</span> <span class="token punctuation">{<!-- --></span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token class-name">HashMapKey</span> k1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMapKey</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">HashMapKey</span> k2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMapKey</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HashMapKey</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>k1<span class="token punctuation">,</span> <span class="token string">"程序猿杂货铺"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"map.get(k2) : "</span> <span class="token operator">+</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <p>定义了两个 HashMapKey 对象，id 都是 1，创建一个 HashMap 对象，通过 put 方法把 k1 和一串字符放入到 map里，最后用 k2 去从 HashMaP里得到值，因为 k1 和 k2 值是一样的，理论上我们是可以用这个键获取到对应的值的，看似符合逻辑，实则不然，它的执行结是：<code>map.get(k2) : null</code>。出现这个情况的原因有两个：</p> <ul> <li>没有重写 hashCode 方法</li> <li>没有重写 equals 方法。</li> </ul> <p><strong>存的是k1，但是要通过k2去取，问题本质是判断两个对象是否相同</strong></p> <p>当往 HashMap 里放 k1 时，首先会调用 HashMapKey 这个类的 hashCode 方法计算它的 hash 值，随后把 k1 放入 hash 值所指引的内存位置</p> <p>但是在 HashMapKey 中没有重写 hashCode 方法，所以这里调用的是顶级父类Object 类的 hashCode 方法，而 Object 类的 hashCode 方法返回的 hash 值其实是 k1 对象的内存地址（假设是 0x100）。</p> <p>如果是调用 map.get(k1)查询map，那么接下来还是会再次调用Object的hashCode 方法（还是返回 k1 的地址 0x100），随后根据得到的 hash 值，能很快地找到 k1。</p> <p>但通过map.get(k2)查询map时，还是会调用Object类的 hashCode方法计算 k2 的 hash值，得到的是 k2 的内存地址（假设是 0x200）。由于 k1 和 k2 是new出来的两个不同的对象，具有不同的内存地址空间，也就是说它们的 hash 值一定不同。所以通过k2是无法得到k1</p> <p>???? 到达此处说明<br /><strong>hashcode不同，两个对象一定不同</strong></p> <p>当重写 hashCode 方法后</p> <pre><code class="prism language-java"><span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>    <span class="token keyword">return</span> id<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  </code></pre> <p>此时因为 hashCode 方法返回的是 id 的 hash值，所以此处 k1 和 k2 这两个对象的 hash 值就变得相等了。</p> <p>存 k1 时，是根据它 id 的 hash 值，假设这里是 103，把 k1 对象放入到对应的位置。而通过 k2 取时，是先计算它的 hash 值，由于 k2 的 id 也是 1，这个值也是 103，随后到这个位置去找。按道理应该可以找到。但运行结果还是会出乎意料：<code>map.get(k2) : null</code>。</p> <p>HashMap 是用链地址法来处理冲突，也就是说，在 103号位置上，有可能存在着多个用链表形式存储的对象。它们通过 hashCode 方法返回的 hash 值都是 103。<br /> <img decoding="async" src="http://img.555519.xyz/uploads/20230108/1baab0c36a308d30a87c1dcd14a48e61.jpg" alt="为什么重写equals一定要重写hashcode"></p> <p>当通过 k2 的 hashCode 到 103号位置查找时，确实会得到 k1。但 k1 有可能仅仅是和 k2 具有相同的 hash值，但未必和 k2 相等。</p> <p>???? 到达此处说明<br /><strong>hashcode相同，两个对象也不一定不同</strong><br /><strong>两个对象不同，hashcode不一定不等</strong></p> <p>判断完hashcode相同后，这个时候就需要调用 HashMapKey 对象的 equals 方法来判断两者是否相等了。 </p> <p>由于在 HashMapKey 对象里没有定义 equals 方法，系统就不得不调用 Object 类的 equals 方法，由于 Object 的原生equals方法是根据两个对象的内存地址来判断，而k1和k2是new出来的两个对象具有不同的内存空间，所以 k1 和 k2 一定不会相等，</p> <p>这就是为什么通过 map.get(k2) 依然得到 null 的原因。</p> <p>当继续重写 equals 方法后</p> <p>在这个方法里，只要两个对象都是 Key 类型，而且它们的 id 相等，它们就相等。</p> <pre><code class="prism language-java"><span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">HashMapKey</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>          <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{<!-- --></span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">HashMapKey</span><span class="token punctuation">)</span> o<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token punctuation">}</span>  </code></pre> <p>至此over</p> <p>???? 判断两个对象是否相同<br /> 先求出hashcode()，比较其值是否相等；<br /> 若相等；<br /> 再比较equals()；<br /> 若相等；<br /> 则认为他们是相等的。若equals()不相等则认为他们不相等。</p> <p> 两个对象相等，hashcode一定相等</p> <p>⚠️ <strong>如果你需要要在 HashMap 的“键”部分存放自定义的对象，一定要重写 equals 和 hashCode 方法。</strong></p> <blockquote> <p>参考<br />https://zhuanlan.zhihu.com/p/61307537</p> </blockquote> <p><strong>如果只重写了equals不重写hashcode呢</strong> </p> <p>在Object类中，equals方法默认使用“==”号来对两个对象进行判断，比较的是地址</p> <blockquote> <p>这种判断方式本质上没错，但是不太符合实际需求，就好比在两个不同的超市里面都有矿泉水，但是因为地址值不同，在使用equals做判断时，这两个超市的矿泉水就会返回为false；因此在实际开发中我们往往需要重写Object的equals方法。</p> </blockquote> <p>在Object类中，hashCode方法根据当前对象地址返回一个整型的hash值。哈希算法具有偶然性，相同对象地址返回hash值一定是一样，不同对象地址返回hash值也可能一样。</p> <p>在java底层集合框架中，为了提高查询效率，往往使用hashCode方法来确定元素的保存位置。 </p> <p>定义一个Sudent类只重写了Object的equals方法，没有重写hashCode方法</p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20230108/7c085e4948ca55d711bed1e82fef126c.jpg" alt="为什么重写equals一定要重写hashcode"><br /> 测试<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230108/eb009f8f7b210433296599afd311291d.jpg" alt="为什么重写equals一定要重写hashcode"><br /> 输出<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230108/fb9d152bac9b93eda7ce4b70dcb95d18.jpg" alt="为什么重写equals一定要重写hashcode"><br /> 按照我们的常规理解，只要两个学生对象的id和name是一样的，我们就可以认为这两个学生对象指的是同一个人，因此重写了equals方法，让Student对象只要name和id相同就返回true，而且并没有重写hashCode方法。</p> <p>在测试中，新建了两个Student对象，并且让他们的id和name完全一样，在调用equals方法时，返回为true，说明这两个对象时相等的。但是由于没有重写hashCode方法，所以这两个对象调用的hashCode还是Object类那里的hashCode方法，并且他们的值并不相等。</p> <p>由此可以得出结论：重写了equals方法，不重写hashCode方法时，可能会出现equals方法返回为true，而hashCode方法却返回不同的结果。</p> <p><strong>那么这样会有什么影响呢？</strong></p> <p> 在java底层的集合框架中（如HashMap，HashSet等），为了提高查询的效率，在确定某个对象的存储位置时，往往需要通过调用对象的hashCode方法来实现。</p> <p>例如在上例中，我们把新建出来的两个Student对象放入HashSet集合中：<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230108/1172da91293d38c57e81087d3e639e9d.jpg" alt="为什么重写equals一定要重写hashcode"><br /> 按照我们主观理解，这两个对象equals为true，那么HashSet应该主动帮我们去重，最终的HashSet中应该只保留1个对象，即最终输出的HashSet的size为1，但是我们得到的结果却是2：</p> <p>是因为HashSet的底层其实就是HashMap，当存放对象时，先调用这个对象的hashCode方法计算存放位置。由于student没有重写hashCode方法，所以使用的是Object类的hashcode方法，所以存放的位置在底层数组上是不一样的，不会触发HashSet的去重功能，而对于程序员来说，两个相同的对象却会在HashSet中出现多次。</p> <blockquote> <p>参考<br />https://zhuanlan.zhihu.com/p/102248677</p> </blockquote> <p>重写了equals和hashcode后<br /><img decoding="async" src="http://img.555519.xyz/uploads/20230108/daed8caec1ca8a0c0a39a3556efb5b88.jpg" alt="为什么重写equals一定要重写hashcode"><br /><img decoding="async" src="http://img.555519.xyz/uploads/20230108/0752354e184083f42a3464d22f19503c.jpg" alt="为什么重写equals一定要重写hashcode"><br /><img decoding="async" src="http://img.555519.xyz/uploads/20230108/d08a972e7357ed03ccd000ae5e205d74.jpg" alt="为什么重写equals一定要重写hashcode"></p> <p><strong>???? 总结</strong></p> <p>根据面向对象思想，只要值相同，就为相同两个对象</p> <p>所以重写equals比较值。出现“equals相等，但是hashcode不等”</p> <p>在实际使用时，比如在集合HashMap HashSet中，先去计算hashcode，若相等再去比较equals</p> <p>若hashcode不同，则认为是不同的对象，无需再去比较equals</p> <p>所以重写了equals，必须要重写hashcode</p> <p></p> <p>个人博客：wgzz.top<br /> 个人公众号：<strong>程序员WeiG</strong><br /> 欢迎关注????</p> </p></div> 			                </div>
                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-106128.htm">给动物接种疫苗属于什么免疫方法类型（给动物接种疫苗的目的）</a></p>
                                        <p>下一个：<a href="/news/article-107043.htm">vue中captcha.js生成验证码</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2025-4-17-free-node-subscribe-links.htm" title="4月17日→20.8M/S|2025年最新免费节点BifrosTV订阅链接地址">4月17日→20.8M/S|2025年最新免费节点BifrosTV订阅链接地址</a></li>
                        <li class="py-2"><a href="/news/article-91316.htm" title="动物医院贵吗多少钱一个小时（动物医院诊疗范围）">动物医院贵吗多少钱一个小时（动物医院诊疗范围）</a></li>
                        <li class="py-2"><a href="/news/article-80219.htm" title="dellbios检测不到固态硬盘（dell识别不了固态硬盘）">dellbios检测不到固态硬盘（dell识别不了固态硬盘）</a></li>
                        <li class="py-2"><a href="/news/article-82299.htm" title="想念动物医院电话（动物医院大众点评）">想念动物医院电话（动物医院大众点评）</a></li>
                        <li class="py-2"><a href="/news/article-78145.htm" title="学校门口暴利生意（学校门口暴利生意农业大楼）">学校门口暴利生意（学校门口暴利生意农业大楼）</a></li>
                        <li class="py-2"><a href="/news/article-74749.htm" title="宠物美容师去哪里学（专业找狗团队大概多少钱）">宠物美容师去哪里学（专业找狗团队大概多少钱）</a></li>
                        <li class="py-2"><a href="/news/article-105301.htm" title="宠物免费领养中心官网查询系统（宠物免费领养中心官网查询系统）">宠物免费领养中心官网查询系统（宠物免费领养中心官网查询系统）</a></li>
                        <li class="py-2"><a href="/news/article-70107.htm" title="动物防疫中心是干嘛的（动物防疫站干嘛的）">动物防疫中心是干嘛的（动物防疫站干嘛的）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-30-node-share-links.htm" title="3月30日→20M/S|2025年最新免费节点BifrosTV订阅链接地址">3月30日→20M/S|2025年最新免费节点BifrosTV订阅链接地址</a></li>
                        <li class="py-2"><a href="/news/article-69468.htm" title="安泰宠物诊所电话地址 安泰宠物诊所电话地址查询">安泰宠物诊所电话地址 安泰宠物诊所电话地址查询</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-04/" title="2025-04 归档">2025-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">90</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                    </ul>
    </div>
</div>

                </div>
            </div>
        </div>
    </div>
    <!-- End About -->
    <!--========== END PAGE LAYOUT ==========-->
        <!--========== FOOTER ==========-->
    <footer class="footer">
        <div class="content container">
            <div class="row">
                <div class="col-xs-12 text-center">
                                        <p>
                                                <a href="/">首页</a> |
                                                <a href="/free-nodes/">免费节点</a> |
                                                <a href="/paid-subscribe/">推荐机场</a> |
                                                <a href="/client.htm">客户端</a> |
                                                <a href="/news/">新闻资讯</a> |
                                                <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
                    <p class="margin-b-0">
                        <a href="/">BifrosTV机场节点订阅官网</a> 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
            <!--// end row -->
        </div>
    </footer>
    <!--========== END FOOTER ==========-->
    <!-- Back To Top -->
    <a href="javascript:void(0);" class="js-back-to-top back-to-top">Top</a>
    <!-- JAVASCRIPTS(Load javascripts at bottom, this will reduce page load time) -->
    <!-- CORE PLUGINS -->
    <script src="/assets/website/js/frontend/bifrostv/jquery.min.js" type="text/javascript"></script>
    <script src="/assets/website/js/frontend/bifrostv/jquery-migrate.min.js" type="text/javascript"></script>
    <script src="/assets/website/js/frontend/bifrostv/bootstrap/js/bootstrap.min.js" type="text/javascript"></script>
    <!-- PAGE LEVEL PLUGINS -->
    <script src="/assets/website/js/frontend/bifrostv/jquery.easing.js" type="text/javascript"></script>
    <script src="/assets/website/js/frontend/bifrostv/jquery.back-to-top.js" type="text/javascript"></script>
    <script src="/assets/website/js/frontend/bifrostv/jquery.smooth-scroll.js" type="text/javascript"></script>
    <script src="/assets/website/js/frontend/bifrostv/jquery.wow.min.js" type="text/javascript"></script>
    <script src="/assets/website/js/frontend/bifrostv/jquery.parallax.min.js" type="text/javascript"></script>
    <script src="/assets/website/js/frontend/bifrostv/jquery.appear.js" type="text/javascript"></script>
    <script src="/assets/website/js/frontend/bifrostv/masonry/jquery.masonry.pkgd.min.js" type="text/javascript"></script>
    <script src="/assets/website/js/frontend/bifrostv/masonry/imagesloaded.pkgd.min.js" type="text/javascript"></script>
    <!-- PAGE LEVEL SCRIPTS -->
    <script src="/assets/website/js/frontend/bifrostv/layout.min.js" type="text/javascript"></script>
    <script src="/assets/website/js/frontend/bifrostv/components/progress-bar.min.js" type="text/javascript"></script>
    <script src="/assets/website/js/frontend/bifrostv/components/masonry.min.js" type="text/javascript"></script>
    <script src="/assets/website/js/frontend/bifrostv/components/wow.min.js" type="text/javascript"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>


</html>